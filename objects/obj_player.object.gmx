<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables

// jumping
jump_spd = 900 / room_speed; // 900 pixels per second, 15 pixels per frame
cur_jump_spd = 0;

airjumps = 1;
grav = 1;


// horizontal movement
h_spd = 600 / room_speed;
cur_h_spd = 0;
accel = 1;

// dashing
dash_spd = 100; // 100 pixels per second (on top of h_spd)
cur_dash_spd = 0;
dash_duration = (1/3) * room_speed; // dash lasts for 20 frames
dashing = false;


// Stats
endurance = 200;
endurance_cost = 100;

stamina_delay = room_speed * 3; // take 5 seconds to fill a completely empty stamina bar
stamina_fraction = 1;

// HUD bars
stamina = 200;
stamina_gain = stamina / stamina_delay // amount of stamina gained per frame




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Platform physics

var device = 0;

// Keyboard controls
var rkey = keyboard_check(vk_right);
var lkey = keyboard_check(vk_left);
var jkey = keyboard_check_pressed(ord('X'));
var dash_key = keyboard_check_pressed(ord('Z'));

// Gamepad controls
var r_pad = gamepad_button_check(0, gp_padr);
var l_pad = gamepad_button_check(device, gp_padl);
var jump_button = gamepad_button_check_pressed(device, gp_face1);
var dash_button = gamepad_button_check_pressed(device, gp_face2);

var go_right = rkey || r_pad;
var go_left = lkey || l_pad;
var jump = jkey || jump_button;
var dash = dash_key || dash_button;



/*



/*
// Add the dash_spd for this frame if there's dash left
if ((dashing) &amp;&amp; (dash_current &lt; dash_duration)) {
    h_dash_spd = (dash_spd*1) / room_speed;
    
    //hspd += (h_dash_spd*1) / room_speed; // dash_spd for this frame
    dash_current += 1;
}





// Dash while moving and if at least the minimum endurance cost is available
if (endurance &gt;= endurance_cost) {
    if (dash &amp;&amp; go_right) {
        
        //dashing = true;
        //hspd += dash_spd;
        
        endurance -= endurance_cost;
        if endurance &lt; 0 {
            endurance = 0;
        }
        
        dash_current = 0;
        dashing = true;
        //alarm[0] = stamina_delay;
    }
    else {
        if (dash &amp;&amp; go_left) {
            
            //dashing = true;
            //hspd += -dash_spd;
            
            endurance -= endurance_cost;
            if endurance &lt; 0 {
                endurance = 0;
            }
            
            dash_current = 0;
            dashing = true;
            //alarm[0] = stamina_delay;
        }
    }
}




// Set the left over endurance
stamina_fraction = endurance/stamina;
endurance = stamina_fraction * stamina;

// if stamina bar isn't full, add the stamina_gain for this frame
if (endurance &lt; stamina) {
    endurance += stamina_gain
}

if (dashing) {
    // Horizontal collissions - dashing
    if (place_meeting(x + h_dash_spd, y, obj_solid)) {
        while (!place_meeting(x + sign(h_dash_spd), y, obj_solid)) {
            x += sign(h_dash_spd);
        }
        h_dash_spd = 0;
    }
}
else {

}

if (dashing) {
    // Move horizontally - dashing
    x += h_dash_spd;
}
else {

}






*/


// Check for the ground
if (place_meeting(x, y+1, obj_solid)) {
    airjumps = 1;
    cur_jump_spd = 0;
    
    // Jumping
    if (jump) {
        cur_jump_spd = -jump_spd;
    }
}
else {
    // Gravity
    if (cur_jump_spd &lt; 10) {
        cur_jump_spd += grav;
    }
    
    /*
    if (keyboard_check_released(vk_up) &amp;&amp; vspd &lt; -4) {
        vspd = -4;
    }*/
    
    // Check for airjump
    if (airjumps &gt; 0) {
        if (jump) {
            cur_jump_spd = -jump_spd;
            airjumps -= 1;
        }
    }
}


// Moving right
if (go_right) {
    if (cur_h_spd &lt; h_spd) {
        cur_h_spd += accel;
    }
    else {
        cur_h_spd = h_spd;
    }

    // Left wall jump    
    if (place_meeting(x-1, y, obj_solid) 
        &amp;&amp; !place_meeting(x, y+1, obj_solid) 
        &amp;&amp; !go_left) {
            cur_jump_spd = -jump_spd;
    }
}

// Moving left
if (go_left) {
    if (cur_h_spd &gt; -h_spd) {
        cur_h_spd += -accel;
    }
    else {
        cur_h_spd = -h_spd;
    }

    // Right wall jump    
    if (place_meeting(x+1, y, obj_solid) 
        &amp;&amp; !place_meeting(x, y+1, obj_solid) 
        &amp;&amp; !go_right) {
            cur_jump_spd = -jump_spd;
    }
}

// Check for not moving
if ((!go_right &amp;&amp; !go_left) || (go_right &amp;&amp; go_left)) {
    // if we haven't stopped yet
    if (cur_h_spd != 0) {
        // and we're moving left
        if (cur_h_spd &lt; 0) {
            // add acceleration in the opposite direction to slow down
            cur_h_spd += accel;
        }
        else {
            // we're moving right
            cur_h_spd += -accel;
        }
    }
}


// Horizontal collissions - normal
if (place_meeting(x + cur_h_spd, y, obj_solid)) {
    while (!place_meeting(x + sign(cur_h_spd), y, obj_solid)) {
        x += sign(cur_h_spd);
    }
    cur_h_spd = 0;
}

// Move horizontally - normal
x += cur_h_spd;

// Vertical collissions
if (place_meeting(x, y + cur_jump_spd, obj_solid)) {
    while (!place_meeting(x, y + sign(cur_jump_spd), obj_solid)) {
        y += sign(cur_jump_spd);
    }
    cur_jump_spd = 0;
}

// Move vertically
y += cur_jump_spd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Enemy collision
if (y &lt; other.y - cur_jump_spd) {
    with (other) {
        instance_destroy();
    }
    cur_jump_spd = -jump_spd;
}
else {
    game_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
