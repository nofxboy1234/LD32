<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables

// jumping
jump_spd = 900 / room_speed; // 900 pixels per second, 15 pixels per frame
cur_jump_spd = 0;

airjumps = 1;
grav = 1;


// horizontal movement
h_spd = 600 / room_speed; // 600 pixels per second
cur_h_spd = 0;
accel = 1;

// dash movement
dashing = false;

dash_spd = 600 / room_speed; // 100 pixels per second (on top of h_spd)
cur_dash_spd = 0;
dash_accel = 5;

dash_cur_frame = 0;
dash_duration = (1/4) * room_speed; // dash lasts for 20 frames


// Stats
stamina = 200;
cur_stamina = stamina;
dash_cost = 100;

stamina_delay = 3 * room_speed; // take 3 seconds to fill a completely empty stamina bar
stamina_fraction = 1;

hp = 200;
cur_hp = hp;
hp_fraction = 1;

hurt = false;

// HUD bars
stamina_gain = stamina / stamina_delay // amount of stamina gained per frame

image_speed = 0;

//just_attacked = false;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// set player to not hurt
hurt = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Platform physics

var device = 0;

// Keyboard controls
var rkey = keyboard_check(vk_right);
var lkey = keyboard_check(vk_left);
var jkey = keyboard_check_pressed(ord('X'));
var dash_key = keyboard_check_pressed(ord('Z'));

// Gamepad controls
var start_button = gamepad_button_check_pressed(device, gp_start);

if (start_button) {
    game_restart();
}

var r_pad = gamepad_button_check(0, gp_padr);
var l_pad = gamepad_button_check(device, gp_padl);
var jump_button = gamepad_button_check_pressed(device, gp_face1);
var dash_button = gamepad_button_check_pressed(device, gp_face2);

var go_right = rkey || r_pad;
var go_left = lkey || l_pad;
var jump = jkey || jump_button;
// The dash button was pressed while moving right or left
var dash = (go_right || go_left) &amp;&amp; (dash_key || dash_button);

// Check for the ground
if (place_meeting(x, y+1, obj_solid)) {
    airjumps = 1;
    cur_jump_spd = 0;
    
    // Jumping
    if (jump) {
        cur_jump_spd = -jump_spd;
    }
}
else {
    // Gravity
    if (cur_jump_spd &lt; 10) {
        cur_jump_spd += grav;
    }
    
    /*
    if (keyboard_check_released(vk_up) &amp;&amp; vspd &lt; -4) {
        vspd = -4;
    }*/
    
    // Check for airjump
    if (airjumps &gt; 0) {
        if (jump) {
            cur_jump_spd = -jump_spd;
            airjumps -= 1;
        }
    }
}

// if the dash button was pressed while moving
// This will only happen once, so we set the dashing variable
// so dashing can continue for the dash_duration.
if (dash) {
    // and if we have enough cur_stamina
    if (cur_stamina &gt;= dash_cost) {
        // turn on dashing, which will run until it is turned off
        dashing = true;
    }
}

// Moving right
if (go_right) {
    if (cur_h_spd &lt; h_spd) {
        cur_h_spd += accel;
    }
    else {
        cur_h_spd = h_spd;
    }

    // Left wall jump    
    if (place_meeting(x-1, y, obj_solid) 
        &amp;&amp; !place_meeting(x, y+1, obj_solid) 
        &amp;&amp; !go_left) {
            cur_jump_spd = -jump_spd;
    }
    
    // if we're still dashing
    if (dashing) {
        // subtract dash_cost from cur_stamina for this dash frame. Split over dash duration
        cur_stamina += -dash_cost / dash_duration;
        if cur_stamina &lt; 0 {
            cur_stamina = 0;
        }
        
        // Accelerate the cur_dash_spd up to the full dash_spd
        if (cur_dash_spd &lt; dash_spd) {
            cur_dash_spd += dash_accel;
        }
        else {
            cur_dash_spd = dash_spd;
        }
        
        // Add the cur_dash_spd on top of the cur_h_spd
        cur_h_spd += cur_dash_spd;

        dash_cur_frame += 1;
        if (dash_cur_frame == dash_duration) {
            dashing = false;
            dash_cur_frame = 0;
        }
    }
}

// Set the stamina fraction that is used by the hud to update the stamina meter
// This is separate from the stamina drain above, as it has it's own time set
// before the stamina bar is full
stamina_fraction = cur_stamina/stamina;
//cur_stamina = stamina_fraction * stamina;

// if stamina bar isn't full, add the stamina_gain for this frame
if (cur_stamina &lt; stamina) {
    cur_stamina += stamina_gain
}

// Reset the cur_stamina to stamina if it goes over the max.
// I think this happens if frame rate fluctuates.
if (cur_stamina &gt; stamina) {
    cur_stamina = stamina
}

// Moving left
if (go_left) {
    if (cur_h_spd &gt; -h_spd) {
        cur_h_spd += -accel;
    }
    else {
        cur_h_spd = -h_spd;
    }

    // Right wall jump    
    if (place_meeting(x+1, y, obj_solid) 
        &amp;&amp; !place_meeting(x, y+1, obj_solid) 
        &amp;&amp; !go_right) {
            cur_jump_spd = -jump_spd;
    }
    
    // if we're still dashing
    if (dashing) {
        // subtract dash_cost from cur_stamina for this dash frame. Split over dash duration
        cur_stamina += -dash_cost / dash_duration;
        if cur_stamina &lt; 0 {
            cur_stamina = 0;
        }
        
        // Accelerate the cur_dash_spd up to the full dash_spd
        if (cur_dash_spd &lt; dash_spd) {
            cur_dash_spd += dash_accel;
        }
        else {
            cur_dash_spd = dash_spd;
        }
        
        // Add the cur_dash_spd on top of the cur_h_spd
        cur_h_spd += -cur_dash_spd;

        dash_cur_frame += 1;
        if (dash_cur_frame == dash_duration) {
            dashing = false;
            dash_cur_frame = 0;
        }
    }
}

// Set the stamina fraction that is used by the hud to update the stamina meter
// This is separate from the stamina drain above, as it has it's own time set
// before the stamina bar is full
stamina_fraction = cur_stamina/stamina;
//cur_stamina = stamina_fraction * stamina;

// if stamina bar isn't full, add the stamina_gain for this frame
if (cur_stamina &lt; stamina) {
    cur_stamina += stamina_gain
}

// Reset the cur_stamina to stamina if it goes over the max.
// I think this happens if frame rate fluctuates.
if (cur_stamina &gt; stamina) {
    cur_stamina = stamina
}

// Check for not moving
if ((!go_right &amp;&amp; !go_left) || (go_right &amp;&amp; go_left)) {
    dashing = false;

    // if we haven't stopped yet
    if (cur_h_spd != 0) {
        // and we're moving left
        if (cur_h_spd &lt; 0) {
            // add acceleration in the opposite direction to slow down
            cur_h_spd += accel;
        }
        else {
            // we're moving right
            cur_h_spd += -accel;
        }
    }
}


// Horizontal collissions
if (place_meeting(x + cur_h_spd, y, obj_solid)) {
    while (!place_meeting(x + sign(cur_h_spd), y, obj_solid)) {
        x += sign(cur_h_spd);
    }
    cur_h_spd = 0;
    dashing = false;
}

// Move horizontally
x += cur_h_spd;

// Vertical collissions
if (place_meeting(x, y + cur_jump_spd, obj_solid)) {
    while (!place_meeting(x, y + sign(cur_jump_spd), obj_solid)) {
        y += sign(cur_jump_spd);
    }
    cur_jump_spd = 0;
}

// Move vertically
y += cur_jump_spd;

hp_fraction = cur_hp / hp;

if (hurt) {
    image_speed = 1;
}
else {
    image_index = 0;
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_boss">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Boss collision
if (!hurt) {
    if (((x &lt; other.x) || (x &gt; other.x)) &amp;&amp; dashing) {
        // boss attacking
        if ((other.image_index == 0) &amp;&amp; (other.hurt == false)) {
        
            hurt = true;
            alarm[0] = 2 * room_speed;
        
            if (cur_hp != 0) {
                cur_hp += -50;
            }
            
            if (cur_hp &lt;= 0) {
                game_restart();
            }
        }
        // boss passive
        if (other.image_index == 1) {
            if (other.hurt == false) {
                
                // set just_attacked so the hurt enemy doesn't hurt the player.
                //just_attacked = true;
                
                with (other) {
                    cur_hp += -100;
                    hurt = true;
                    alarm[1] = 2 * room_speed;
                    
                    if (cur_hp == 0) {
                        instance_destroy();
                    }
                }
            }
        }
        
    }
    else {
        if (other.hurt == false) {
            //game_restart();
            
            hurt = true;
            alarm[0] = 2 * room_speed;
        
            cur_hp += -50;
            if (cur_hp == 0) {
                game_restart();
            }
        }
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Enemy collision
if (!hurt) {
    if (((x &lt; other.x) || (x &gt; other.x)) &amp;&amp; dashing) {
        // enemy attacking
        if (other.image_index = 0) {
            hurt = true;
            alarm[0] = 2 * room_speed;
        
            if (cur_hp != 0) {
                cur_hp += -50;
            }
            
            if (cur_hp &lt;= 0) {
                game_restart();
            }
        }
        // enemy passive
        if (other.image_index = 1) {
            if (cur_hp != hp) {
                cur_hp += 50;
            }
            
            with (other) {
                instance_destroy();
            }
        }
        
    }
    else {
        hurt = true;
        alarm[0] = 2 * room_speed;
    
        cur_hp += -50;
        if (cur_hp == 0) {
            game_restart();
        }
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
