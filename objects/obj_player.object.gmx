<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables
grav = 1;
spd = 10;
dash_spd = 200;

dir_facing = 1; // 1 = right, -1 = left

// Stats
endurance = 200;
endurance_cost = 100;

stamina_delay = room_speed * 3; // take 5 seconds to fill a completely empty stamina bar
stamina_fraction = 1;

// HUD bars
stamina = 200;
stamina_gain = stamina / stamina_delay // amount of stamina gained per frame

jspd = 15;
hspd = 0;
vspd = 0;

fric = 1.00;

airjump = 1;

xaxis = 0;
yaxis = 0;
magnitude = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Platform physics

///scr_get_gamepad_input(device)
var device = 0;
// xaxis = gamepad_axis_value(device, gp_axislh); // (-1, 1)
// yaxis = gamepad_axis_value(device, gp_axislv);


// Keyboard controls
var rkey = keyboard_check(vk_right);
var lkey = keyboard_check(vk_left);
var jkey = keyboard_check_pressed(ord('X'));
var dash_key = keyboard_check_pressed(ord('Z'));

// Gamepad controls
var r_pad = gamepad_button_check(0, gp_padr);
// var r_pad = gamepad_axis_value(device, gp_padr);

var l_pad = gamepad_button_check(device, gp_padl);
// var l_pad = gamepad_axis_value(device, gp_padl);

var jump_button = gamepad_button_check_pressed(device, gp_face1);
var dash_button = gamepad_button_check_pressed(device, gp_face2);

var go_right = rkey || r_pad;
var go_left = lkey || l_pad;
var jump = jkey || jump_button;
var dash = dash_key || dash_button;

// Check for the ground
if (place_meeting(x, y+1, obj_solid)) {
    airjump = 1;
    vspd = 0;
    
    // Jumping
    if (jump) {
        vspd = -jspd;
    }
}
else {
    // Gravity
    if (vspd &lt; 10) {
        vspd += grav;
    }
    
    if (keyboard_check_released(vk_up) &amp;&amp; vspd &lt; -4) {
        vspd = -4;
    }
    
    // Check for airjump
    if (airjump &gt; 0) {
        if (jump) {
            vspd = -jspd;
            airjump -= 1;
        }
    }
}

// Moving right
if (go_right) {
    if (hspd &lt; spd) {
        hspd += fric;
    }
    else {
        hspd = spd;
    }
    
    // Left wall jump    
    if (place_meeting(x - 1, y, obj_solid) 
        &amp;&amp; !place_meeting(x, y+1, obj_solid) 
        &amp;&amp; !go_left) {
            vspd = -jspd;
        }
    dir_facing = 1;
}

// Moving left
if (go_left) {
    if (hspd &gt; -spd) {
        hspd -= fric;
    }
    else {
        hspd = -spd;
    }
    
    // Right wall jump    
    if (place_meeting(x + 1, y, obj_solid) 
        &amp;&amp; !place_meeting(x, y+1, obj_solid) 
        &amp;&amp; !go_right) {
            vspd = -jspd;
        }
    dir_facing = -1;
}

// Check for not moving
if ((!go_right &amp;&amp; !go_left) || (go_right &amp;&amp; go_left)) {
    if (hspd != 0) {
        if (hspd &lt; 0) {
            hspd += fric;
        }
        else {
            hspd -= fric;
        }
    }

    /*    
    if (endurance &gt;= endurance_cost) {
        // if the player isn't running, and is slowing down
        // and they're facing the right, and they press dash
        if ((dir_facing = 1) &amp;&amp; dash) {
            // dash left
            hspd += -dash_spd;
            
            endurance -= endurance_cost;
            if endurance &lt; 0 {
                endurance = 0;
            }
            
        }
        // if the player isn't running, and is slowing down
        // and they're facing the left, and they press dash
        if ((dir_facing = -1) &amp;&amp; dash) {
            // dash right
            hspd += dash_spd;
            
            endurance -= endurance_cost;
            if endurance &lt; 0 {
                endurance = 0;
            }
            
        }
    }*/
}

// Dash while moving and if at least the minimum endurance cost is available
if (endurance &gt;= endurance_cost) {
    if (dash &amp;&amp; go_right) {
        hspd += dash_spd;
        
        endurance -= endurance_cost;
        if endurance &lt; 0 {
            endurance = 0;
        }
        //alarm[0] = stamina_delay;
    }
    else {
        if (dash &amp;&amp; go_left) {
            hspd += -dash_spd;
            
            endurance -= endurance_cost;
            if endurance &lt; 0 {
                endurance = 0;
            }
            //alarm[0] = stamina_delay;
        }
    }
}

stamina_fraction = endurance/stamina;
endurance = stamina_fraction * stamina;

// if stamina bar isn't full, fill it
if (endurance &lt; stamina) {
    endurance += stamina_gain
}

// Set the endurance meter
//if (alarm[0] != -1) {
        //elapsed_delay = stamina_delay - alarm[0]
        //endurance += ((elapsed_delay/stamina_delay)*stamina_fraction) * (stamina - endurance);
//}

// Horizontal collissions
if (place_meeting(x + hspd, y, obj_solid)) {
    while (!place_meeting(x + sign(hspd), y, obj_solid)) {
        x += sign(hspd);
    }
    hspd = 0;
}

// Move horizontally
x += hspd;

// Vertical collissions
if (place_meeting(x, y + vspd, obj_solid)) {
    while (!place_meeting(x, y + sign(vspd), obj_solid)) {
        y += sign(vspd);
    }
    vspd = 0;
}

// Move vertically
y += vspd;






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Enemy collision
if (y &lt; other.y - vspd) {
    with (other) {
        instance_destroy();
    }
    vspd = -jspd;
}
else {
    game_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
